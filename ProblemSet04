---
title: 'Stat 133 HW04: String Manipulation and Regex'
author: "Arman Madani"
date: "November 5, 2015"
output: pdf_document
---

## Introduction

This assignment has two purposes:

a) to familiarize you with manipulating character strings
b) to introduce you to regular expressions in R

Submit your assignment to bcourses, specifically turn in your __Rmd__ (R markdown) file as well as the produced pdf file. Make sure to change the argument `eval=TRUE` inside every testing code chunk.


-----

## Names of Files

Imagine that you need to generate the names of 4 data files (with .csv extension). All the files have the same prefix name but each of them has a different number: `plot01.png`, `plot02.png`, `plot03.png`, and `plot04.png`. We can generate a character vector with these names in R. One naive solution would be to write something like this:
```{r}
files <- c('plot01.png', 'plot02.png', 'plot03.png', 'plot04.png')
```

Now imagine that you need to generate 100 file names. You could write a vector with 100 file names but it's going to take you a while.

How would you generate the corresponding character vector `files` in R containing 100 files names:  `plot01.png, plot02.png, plot03.png, ..., plot99.png, plot100.png`? Notice that the numbers of the first 9 files start with 0.

```{r, eval = TRUE}
files <- c(paste('plot0', 1:9, '.png', sep = ''), paste('plot', 10:100, '.png', sep = ''))
files
```


-----

## USA States Names 

One of the datasets that come in R is `USArrests`. The row names of this data correspond to the 50 states. We can create a vector `states` with the row names:
```{r}
states <- rownames(USArrests)
head(states, n = 5)
```


### Using `grep()`

You can use the function `grep()` to know if there are any states containing the letter "z".
```{r}
# states containing the letter 'z'
grep(pattern = 'z', x = states)
```
In this case there is just one state (the third one) which corresponds to `r states[grep(pattern = 'z', x = states)]`

You can also use `grep()` with its argument `value = TRUE` to obtain the value of the matched pattern:
```{r}
# states containing the letter 'z'
grep(pattern = 'z', x = states, value = TRUE)
```

__Your turn__. Use `grep()`---and maybe other functions---to write the commands that answer the following questions:

- How many states contain the letter `i`?
- How many states contain the letter `q`?
- How many states do not contain the letter `a`?
- Which states contain the letter `j`?
- Which states contain the letter `x`?
- Which states are formed by two words?
- Which states start with `W` and end with a vowel?
- Which states start with `W` and end with a consonant?
- Which states contain at least three `i` (e.g. Illinois)?
- Which states contain five vowels (e.g. California)?
- Which states have three vowels next to each other (e.g. Hawaii)?

Tip: You can use `grep()`'s argument `ignore.case` to ignore letters in lower or upper case.
```{r, eval = TRUE}
# your answers
length(grep(pattern = 'i', x = states, ignore.case = TRUE))
length(grep(pattern = 'q', x = states, ignore.case = TRUE))
length(states[-grep(pattern = 'a', x = states, ignore.case = TRUE)])
grep(pattern = 'j', x = states, ignore.case = TRUE, value = TRUE)
grep(pattern = 'x', x = states, ignore.case = TRUE, value = TRUE)
grep(pattern = ' ', x = states, ignore.case = TRUE, value = TRUE)
grep(pattern = '^W.*[A|E|I|O|U]$', x = states, ignore.case = TRUE, value = TRUE)
grep(pattern = '^W.*[^A|E|I|O|U]$', x = states, ignore.case = TRUE, value = TRUE)
grep(pattern = 'i.*i.*i', x = states, ignore.case = TRUE, value = TRUE)
grep(pattern = '^[^(A|E|I|O|U)]*[A|E|I|O|U][^(A|E|I|O|U)]*[A|E|I|O|U][^(A|E|I|O|U)]*[A|E|I|O|U][^(A|E|I|O|U)]*[A|E|I|O|U][^(A|E|I|O|U)]*[A|E|I|O|U][^(A|E|I|O|U)]*$', x = states, ignore.case =TRUE, value = TRUE)
grep(pattern = '[A|E|I|O|U]{3}', x = states, ignore.case = TRUE, value = TRUE)
```

-----

## Starts with ... 

Write a function `starts_with()` such that, given a character string and a single character, it determines whether the string starts with the provided character. 

```{r, eval = TRUE}
starts_with <- function(string, char) {
  rev.string <- unlist(strsplit(string, ''))
  output <- grepl(pattern = char, x = rev.string[1], ignore.case = TRUE)
  return(output)
}
```

Test it:
```{r, eval=TRUE}
starts_with("Hello", 'H')  # TRUE

starts_with("Good morning", 'H')  # FALSE
```

-----

## Ends with ... 

Now write a function `ends_with()` such that, given a character string and a single character, it determines whether the string ends with the provided character. 

```{r}
ends_with <- function(string, char) {
  rev.string <- unlist(strsplit(string, ''))
  output <- grepl(pattern = char, x = tail(rev.string, 1), ignore.case = TRUE)
  return(output)
}
```

Test it:
```{r, eval=TRUE}
ends_with("Hello", 'o')  # TRUE

ends_with("Good morning", 'o')  # FALSE
```

-----

## Colors in Hexadecimal Notation

Write a function `is_hex()` that checks whether the input is a valid color in hexadecimal notation. Remember that a hex color starts with a hash `#` symbol followed by six hexadecimal digits: 0 to 9, and the first six letters A, B, C, D, E, F. Since R accepts hex-colors with lower case letters (a, b, c, d, e, f) your function should work with both upper and lower case letters.

```{r}
is_hex <- function(hexcolor) {
  output <- grepl(pattern = '^(#)[A|B|C|D|E|F|0|1|2|3|4|5|6|7|8|9]{6}$', x = hexcolor,
            ignore.case=TRUE)
  return(output)
}
```


Test it:
```{r, eval=TRUE}
is_hex("#ff0000")  # TRUE
is_hex("#123456")  # TRUE
is_hex("#12Fb56")  # TRUE

is_hex("#1234GF")  # FALSE
is_hex("#1234567") # FALSE
is_hex("blue")     # FALSE
```

-----

## Hexadecimal Colors with Transparency

Write a function `is_hex_alpha()` that determines whether the provided input is a hex color with alpha transparency. Remember that such a color has 8 hexadecimal digits instead of just 6.

```{r}
is_hex_alpha <- function(transparent.hex) {
  output <- grepl(pattern = '^(#)[A|B|C|D|E|F|0|1|2|3|4|5|6|7|8|9]{8}$', x = transparent.hex,
            ignore.case=TRUE)
  return(output)
}

```

Test it:
```{r, eval=TRUE}
is_hex_alpha("#FF000078")  # TRUE

is_hex_alpha("#FF0000")   # FALSE
```


## Hexadecimal Color split in RGB values

Write a function `hex_values()` that takes a hex-color and returns a vector with the values of the RGB---and possibly alpha---channels. 

```{r}
hex_values <- function(hexcolor) {
  no.transparency <- grepl(pattern = '^(#)[A|B|C|D|E|F|0|1|2|3|4|5|6|7|8|9]{6}$', x = hexcolor, 
    ignore.case = TRUE)
  transparency <- grepl(pattern = '^(#)[A|B|C|D|E|F|0|1|2|3|4|5|6|7|8|9]{8}$', x = hexcolor, 
    ignore.case = TRUE)
  individual.chars <- unlist(strsplit(hexcolor, split = ''))
  red <- paste(individual.chars[2], individual.chars[3], sep = '')
  green <- paste(individual.chars[4], individual.chars[5], sep = '')
  blue <- paste(individual.chars[6], individual.chars[7], sep = '')
  alpha <- paste(individual.chars[8], individual.chars[9], sep = '')
  if (no.transparency == TRUE & transparency == FALSE) {
    output <- c('red' = red, 'green' = green, 'blue' = blue)
    return(output)
  }
  if (transparency == TRUE & no.transparency == FALSE) {
    output <- c('red' = red, 'green' = green, 'blue' = blue, 'alpha' = alpha)
    return(output)
  }  
  if (transparency == FALSE & no.transparency == FALSE) {
    message <- ("Input is not a valid hexadecimal color")
    cat(message)
  }
}
```

Test it:

```{r, eval = TRUE}
# color with no transparency
hex_values("#435690")
```

If the provided color has an alpha channel, then the output should display such value:
```{r, eval = TRUE}
# color with transparency
hex_values("#435690FF")
```

If the input is not a valid hex-color, `hex_vales()` should return the message: `input is not a valid hexadecimal color`. The message should be displayed via `cat()`

```{r, eval = TRUE}
# invalid hex color
hex_values("#435XY90")
```

-----

## Splitting Characters

Create a function `split_chars()` that splits a character string into one single character elements.

```{r}
# split_chars()
split_chars <- function(string) {
  string.rev <- unlist(strsplit(x = string, split = ''))
  return(string.rev)
}
```

Test it:
```{r, eval=TRUE}
split_chars('Go Bears!')

split_chars('Expecto Patronum')
```

Note that `split_chars()` returns the output in a single vector. Each element is a single character.

-----

## Number of Vowels

Create a function `num_vowels()` that returns the number of vowels of a character vector. In this case, the input is a vector in which each element is a single character.

```{r}
# num_vowels()
num_vowels <- function(string) {
  A <- length(grep(pattern = 'A', x = string, ignore.case = TRUE))
  E <- length(grep(pattern = 'E', x = string, ignore.case = TRUE))
  I <- length(grep(pattern = 'I', x = string, ignore.case = TRUE))
  O <- length(grep(pattern = 'O', x = string, ignore.case = TRUE))
  U <- length(grep(pattern = 'U', x = string, ignore.case = TRUE))
  output <- c('A' = A, 'E' = E, 'I' = I, 'O' = O, 'U' = U)
  return(output)
}
```

Test it:
```{r, eval=TRUE}
vec <- c('G', 'o', ' ', 'B', 'e', 'a', 'r', 's', '!')
num_vowels(vec)
```

Notice that the output is a numeric vector with five elements. Each element has the name of the corresponding vowel.

-----

## Counting Vowels

Use the functions `split_chars()` and `num_vowels()` to write a function `count_vowels()` that computes the number of vowels of a character string:

```{r}
# count_vowels()
count_vowels <- function(string) {
  rev.string <- split_chars(string)
  output <- num_vowels(rev.string)
  return(output)
}
```

Test it:
```{r, eval=TRUE}
count_vowels("The quick brown fox jumps over the lazy dog")
```

Make sure that `count_vowels()` counts vowels in both lower and upper case letters:

```{r, eval=TRUE}
count_vowels("THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG")
```

-----

## Number of Consonants

Write a function `num_cons()` that counts the number of consonants regardless of whether they are in upper or lower case (just the number, not the counts of each letter)
```{r, eval=TRUE}
num_cons <- function(string) {
  rev.string <- gsub(" ", NA, split_chars(string)) #remove spaces
  consonants <- length(grep(pattern = '[^A|E|I|O|U]', x = rev.string, ignore.case = TRUE))
  output <- ('Consonants' = consonants)
  return(output)
}
```

Test it:
```{r, eval=TRUE}
fox <- "The quick brown fox jumps over the lazy dog"
num_cons(fox)
```

-----

## Reversing Characters

Write a function that reverses a string by characters

```{r}
reverse_chars <- function(string) {
  string.rev <- rev(split_chars(string))
  output <- paste(string.rev, collapse = '')
  return(output)
}
```

Test it:
```{r, eval=TRUE}
reverse_chars("gattaca")
reverse_chars("Lumox Maxima")
```

-----

## Reversing Sentences by Words

Write a function `reverse_words()` that reverses a string (i.e. a sentence) by words

```{r}
# reverse_words()
reverse_words <- function(string) {
  string.rev <- unlist(strsplit(string, split = " "))
  output <- rev(string.rev)
  cat(output)
}
```

Test it:
```{r, eval=TRUE}
reverse_words("sentence! this reverse")
```

If the string is just one word then there's basically no reversing:
```{r, eval=TRUE}
reverse_words("string")
```

-----
